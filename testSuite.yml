# BASIC TESTS

test1 - Int Variable Declaration and Initialization:
-   let
        int x = 10;
    in
        print(x);
-   "10"

test2 - Bool Variable Declaration and Initialization:
-   let
        bool x = true;
    in
        print(x);
-   "1"

test3 - Bool Variable Declaration with Subtyping:
-   let
        bool x = 0;
    in
        print(x);
-   "Type check error: wrong type in Var at line 1:4"

test4 - Int Variable Declaration with Subtyping:
-   let
        int x = true;
    in
        print(x);
-   "1"

test5 - Sum and Difference:
-   let
        int x = 11;
        int y = 5;
    in
        print(x + y, x - y);
-   "16\n6"

test6 - Multiplication and Division:
-   let
        int x = 24;
        int y = 6;
    in
        print(x * y, x / y);
-   "144\n4"

test7 - Division by Zero:
-   let
        int x = 5;
    in
        print(x / 0);
-   "One or more divisions by zero have been detected. Check your math!"

test8 - Minus Unary Operator:
-   let
        int x = -7;
    in
        print(x)
        x = -x
        print(x);
-   "-7\n7"

test9 - Equal, Less Or Equal, Greater Or Equal Operators:
-   let
        bool eq = 2 == 2;
        bool le = 3 <= 4;
        bool ge = 5 >= 1;
    in
        print(eq, le, ge);
-   "1\n1\n1"

test10 - And, Or, Not Operators:
-   let
        bool x = true;
        bool y = false;
    in
        print(x && y, x || y, not x, not y);
-   "0\n1\n0\n1"

test11 - Boolean Operators on Non-Boolean Variables:
-   let
        bool x = true;
        bool res = x && 1;
    in
        print(res);
-   "Type check error: wrong type in And at line 1:30"

test12 - Precedence Between Boolean Operators:
-   let
        bool x = false;
        int y = 7;
        bool z = x || true + not x * y == 2 + y - not x;
    in
        print(z);
-   "1"  # z = ((x || true) + ((not x) * y)) == (2 + (y - (not x)))

test13 - Not and Minus Operators Coexistence:
-   let
        int x = -5;
        bool y = not (5 == x);
        int z = - (not y + x);
    in
        print(x, y, z);
-   "-5\n1\n5"

test14 - Simple Function Definition:
-   let
        int succ(int x)
            return x + 1;
    in
        print(succ(3));
-   "4"

test15 - Function Definition With Local Declarations:
-   let
        void f(int z) let
            int x = 5;
            int y = 4;
        in
            x = y * z - x
            print(x, y, z);
    in
        f(3);
-   "7\n4\n3"

test16 - Complex Function With Multiple Statements:
-   let
        int g(int x, int y)
            x = y - x * 2
            y = 3 * x
            return x + y;
    in
        print(g(2,5));
-   "4"

test17 - Recursive Function (Fibonacci):
-   let
        int fibonacci(int n)
            return
                if (n <= -1) then { 0 }
                else {
                    if (n == 1 || n == 0) then { 1 }
                    else { fibonacci(n-1) + fibonacci(n-2) }
                };
    in
        print(fibonacci(7));
-   "21"

test18 - Recursive Function (Factorial):
-   let
        int factorial(int n)
            return
                if (n <= -1) then { 0 }
                else {
                    if (n == 1 || n == 0) then { 1 }
                    else { n * factorial(n-1) }
                };
    in
        print(factorial(5));
-   "120"

test19 - Mutually Recursive Functions:
-   let
        void h(int x)
            if (x >= 1) then { g(x-1) }
            print(-x);
        void g(int x)
            if(x >= 1) then { h(x-1) }
            print(x);
    in
        h(5);
- "0\n-1\n2\n-3\n4\n-5"

test20 - Use of Externally-Declared Variables:
-   let
        int f() let
            int z = x + y;
        in
            return z * x - y;
        int x = 10;
        int y = 13;
    in
        print(f());
-   "217"

test21 - Use of Externally-Declared Variables and Shading:
-   let
        int x = 10;
        int g(int x, int y)
            return x * y - z * y;
        int z = 5;
    in
        print(g(3,5));
-   "-10"

test22 - Multiple LetIn Blocks:
-   let
        int x = 23;
        bool y = true;
        int z = if (y && false) then { x } else { -x };
    in
        print(x, y, z);
    let
        int a = 32;
        int x = a * 2;
    in
        print(a, x);
-   "23\n1\n-23\n32\n64"

test23 - Minimal Class Declaration:
-   class Empty {
        void amIEmpty()
            print(true);
    };
    let
        Empty e = new Empty();
    in
        e.amIEmpty();
-   "1"

test24 - Class Declaration with Fields and Methods:
-   class Auto(int porte = 5, int marce = 6, int marciaCorrente = 0) {
        void cambiaNumPorte(int p)
            porte = p;
        void inserisciMarcia(int m)
            if ((m >= 0) && (m <= marce)) then { marciaCorrente = m };
    };
    let
        Auto a = new Auto();
        Auto b = new Auto();
    in
        print(a.porte, a.marce, a.marciaCorrente)
        b.cambiaNumPorte(3)
        b.inserisciMarcia(1)
        b.inserisciMarcia(7)
        print(b.porte, b.marce, b.marciaCorrente);
-   "5\n6\n0\n3\n6\n1"

test25 - Subclass Declaration:
-   class A (int x = 10) {
        int getX() return x;
    };
    class B extends A (int y = 20) {
        int getY() return y;
    };
    let
        B b = new B();
    in
        print(b.getX(), b.getY());
-   "10\n20"

test26 - Class Field Overriding:
-   class A (bool field = false) {
        bool notField() return not field;
    };
    class B extends A (bool field = true) {
        void printField() print(field);
    };
    let
        B b = new B();
    in
        b.printField();
-   "Class field 'field' is already declared in one of its superclasses at line 1:68"

test27 - Class Method Overriding:
-   class A {
        int f(int x) return x + 1;
    };
    class B extends A {
        int f(int x) return x * x;
    };
    let
        A a = new A();
        B b = new B();
    in
        print(a.f(5))
        print(b.f(5));
-   "6\n25"

test28 - Wrong Method Overriding (Return Type):
-   class A {
        int f(int x) return x + 1;
    };
    class B extends A {
        void f(int x) print(x == x);
    };
    let
        B b = new B();
    in
        print(b.f(5));
-   "Type check error: wrong type in Method Dec (return type overloading not allowed) at line 1:60"

test29 - Wrong Method Overriding (Number of Params):
-   class A {
        int f(int x) return x + 1;
    };
    class B extends A {
        int f(int x, int y) return x + y;
    };
    let
        A a = new A();
        B b = new B();
    in
        print(a.f(5))
        print(b.f(5,4));
-   "Method overloading (wrong number of parameters) 'f' is not allowed at line 1:60"

test30 - Wrong Method Overriding (Param Type):
-   class A {
        int f(int x) return x + 1;
    };
    class B extends A {
        int f(bool x) return x;
    };
    let
        B b = new B();
    in
        print(b.f(true));
-   "Type check error: wrong type in Method Dec (parameter overloading not allowed) at line 1:60"

test31 - Object Initialization with Null:
-   class A (int x = 25) {
        int doubleX() return x * 2;
    };
    let
        A a = null;
    in
        print(a.x);
-   "Trying to either use or access uninitialized object"

test32 - Object Delayed Initialization:
-   class A (int x = 25) {
        int doubleX() return x * 2;
    };
    let
        A a = null;
    in
        a = new A()
        print(a.x);
-   "25"

test33 - Object Initialization Through Function Call:
-   class A (int x = 1234) {
        int negative() return -x;
    };
    let
        A a = null;
        A generateObject()
            return new A();
    in
        a = generateObject()
        print(a.negative());
-   "-1234"

test34 - "Recursive" Class Declaration:
-   class A (A a = new A()) {
        int f() return 1;
    };
    let
        A a = new A();
    in
        print(a.f());
-   "Object inizialization can't have same type of defining class (use NULL or a subtype instead) at line 1:0"

test35 - Assignment Between Objects:
-   class A (int x = 2) {
        void printX() print(x);
    };
    let
        A a1 = new A();
        A a2 = new A();
    in
        a1.printX()
        a2.printX()
        a2.x = 100
        a1 = a2
        a1.printX();
-   "2\n2\n100"

test36 - Mutually Recursive Methods in a Class:
-   class A {
        void h(int x)
            if (x >= 1) then { g(x-1) }
            print(-x);
        void g(int x)
            if(x >= 1) then { h(x-1) }
            print(x);
    };
    let
        A a = new A();
    in
        a.g(4);
-   "0\n-1\n2\n-3\n4"

# THIS TEST NEEDS SEMANTIC ERROR CHECKS
test37 - Scope Error in a Function:
-   let
        int sum(int x)
            return x + y;
    in
        print(sum(2));
-   "ciao"

test38 - Scope Error in a Let Statement:
-   let
        int n = 11;
    in
        print(num);
-   "Variable num not declared at line: 1:25"

# THIS TEST NEEDS SEMANTIC ERROR CHECKS
test39 - Scope Error Between Functions:
-   let
        int f(int x) let
            int y = 20;
        in
            return g(y) + x;
        int g(int x)
            return x + y;
    in
        print(f(5));
-   "ciao"

test40 - Function Call with Wrong Number of Parameters:
-   let
        bool equal(int x, int y)
            return x == y;
    in
        print(equal(10));
-   "Function equal call with wrong number of parameters is not allowed at line 1:53"

test41 - Ridiculous Naming:
-   class A (int A = 50) {
        int A() return A;
    };
    let
        A A = new A();
    in
        print(A.A)
        print(A.A());
-   "50\n50"

test42 - Ridiculous Naming with Function Parameters:
-   class A (int A = 20) {
        int A(int A) return A;
    };
    let
        A A = new A();
    in
        print(A.A)
        A.A = A.A(50)
        print(A.A);
-   "20\n50"

test43 - Ridiculous Naming with Function Parameters, Shading and Assignment:
-   class A (int A = 20) {
        void A(int A) A = A;
    };
    let
        A A = new A();
    in
        print(A.A)
        A.A(50)
        print(A.A);
-   "20\n20"

# NEW TESTS SHOULD BE ADDED HERE